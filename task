Question 1: By default are django signals executed synchronously or asynchronously? Please support your answer with a code snippet that conclusively proves your stance. The code does not need to be elegant and production ready, we just need to understand your logic.

from django.db import models
from django.db.models.signals import post_save
from django.dispatch import receiver
import time

class Book(models.Model):
    title = models.CharField(max_length=100)

@receiver(post_save, sender=Book)
def post_save_book(sender, instance, **kwargs):
    print("Signal started...")
    time.sleep(5) 
    print("Signal completed.")

# Run this in Django shell
import time
from myapp.models import Book

start = time.time()
Book.objects.create(title="Django Unchained")
end = time.time()

print(f"Time taken: {end - start:.2f} seconds")




Question 2: Do Django signals run in the same thread as the caller?


import threading
from django.db import models
from django.db.models.signals import post_save
from django.dispatch import receiver

class Book(models.Model):
    title = models.CharField(max_length=100)

@receiver(post_save, sender=Book)
def post_save_book(sender, instance, **kwargs):
    print(f"[Signal] Thread ID: {threading.get_ident()}")


import threading
from myapp.models import Book

print(f"[Caller] Thread ID: {threading.get_ident()}")
Book.objects.create(title="Multithreaded Book")

output:
[Caller] Thread ID: 139925960177408
[Signal] Thread ID: 139925960177408




Question 3: Do Django signals run in the same database transaction as the caller?


from django.db import models, transaction
from django.db.models.signals import post_save
from django.dispatch import receiver

class Book(models.Model):
    title = models.CharField(max_length=100)

@receiver(post_save, sender=Book)
def post_save_book(sender, instance, **kwargs):
    print(f"In transaction: {transaction.get_connection().in_atomic_block}")

from django.db import transaction
from myapp.models import Book

with transaction.atomic():
    Book.objects.create(title="Transactional Book")
Output:

In transaction: True






Topic: Custom Classes in Python?

following requirements:

An instance of the Rectangle class requires length:int and width:int to be initialized.
We can iterate over an instance of the Rectangle class 
When an instance of the Rectangle class is iterated over, we first get its length in the format: {'length': <VALUE_OF_LENGTH>} followed by the width {width: <VALUE_OF_WIDTH>}

class Rectangle:
    def __init__(self, length: int, width: int):
        self.length = length
        self.width = width

    def __iter__(self):
        yield {'length': self.length}
        yield {'width': self.width}


rect = Rectangle(10, 5)

for dim in rect:
    print(dim)

Output:
{'length': 10}
{'width': 5}

